{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Qin2016_neupy.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOML5GRHAkg1Q1e8X3c6sYq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AnguillaJaponica/Qin2016/blob/main/first%20commit%20from%20colab\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yDm0pm7sLsh4"
      },
      "source": [
        "!pip install neupy"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sd81-TOqJlqz"
      },
      "source": [
        "from sklearn import preprocessing\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import scipy.stats\n",
        "from matplotlib import pyplot as plt\n",
        "from matplotlib import cm\n",
        "from neupy.layers import *\n",
        "from neupy import algorithms"
      ],
      "execution_count": 173,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qAJ2syPDVoAa",
        "outputId": "597c70fd-970f-457a-ee78-c1c52f2a4179",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# google driveをマウント。ファイルを置く場所に応じて、ディレクトリを変えてください。今はルートになってます。\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "all_data = pd.read_csv('drive/My Drive/all_table3.csv') \n",
        "# 元のcsvが扱いづらかったので、a, b, cのカラムを分けてクエリっぽく使ってます。\n",
        "train_data = all_data[all_data['group'] == 'a']\n",
        "validation_data = all_data[all_data['group'] == 'b']\n",
        "test_data = all_data[all_data['group'] == 'c']\n",
        "\n",
        "# K値でやってみよう\n",
        "# sklearnのpreprocessing.MinMaxScalerを使って正規化。デフォルトは(0, 1)なので、論文の定義どおり(-1, 1)で出してくれるようにしています。\n",
        "\n",
        "# 訓練用\n",
        "trainX_Kvalue = preprocessing.MinMaxScaler(feature_range=(-1,1)).fit_transform(np.array(pd.concat([train_data['Temperature(K)_Kvalue'], train_data['Time(h)_Kvalue']], axis=1)).reshape(30, 2))\n",
        "trainY_Kvalue = preprocessing.MinMaxScaler(feature_range=(-1,1)).fit_transform(np.array(train_data['ΔK (%)']).reshape(-1, 1))\n",
        "# バリデーション用\n",
        "validationX_Kvalue = preprocessing.MinMaxScaler(feature_range=(-1,1)).fit_transform(np.array(pd.concat([validation_data['Temperature(K)_Kvalue'], validation_data['Time(h)_Kvalue']], axis=1)))\n",
        "validationY_Kvalue = preprocessing.MinMaxScaler(feature_range=(-1,1)).fit_transform(np.array(validation_data['ΔK (%)']).reshape(-1, 1))\n",
        "# テスト用\n",
        "testX_Kvalue = preprocessing.MinMaxScaler(feature_range=(-1,1)).fit_transform(np.array(pd.concat([test_data['Temperature(K)_Kvalue'], test_data['Time(h)_Kvalue']], axis=1)))\n",
        "testY_Kvalue = preprocessing.MinMaxScaler(feature_range=(-1,1)).fit_transform(np.array(test_data['ΔK (%)']).reshape(-1, 1))"
      ],
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Pxqly6RNWx_"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4Ivxoo8PL79Q",
        "outputId": "5254eaf1-8e51-4a2f-eec9-5ccb411268b5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# 入力: [温度, 保存期間]\n",
        "n_inputs = 2\n",
        "# 出力: [K値]\n",
        "n_outputs = 1\n",
        "\n",
        "network = join(Input(n_inputs), Sigmoid(7), Linear(n_outputs))\n",
        "# 最適化アルゴリズムはLM法。学習率muはチューニングしてみてください。\n",
        "optimizer = algorithms.LevenbergMarquardt(network, verbose=True, show_epoch=5, mu=0.001)"
      ],
      "execution_count": 225,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Main information\n",
            "\n",
            "[ALGORITHM] LevenbergMarquardt\n",
            "\r\n",
            "[OPTION] loss = mse\n",
            "[OPTION] mu = 0.001\n",
            "[OPTION] mu_update_factor = 1.2\n",
            "[OPTION] show_epoch = 5\n",
            "[OPTION] shuffle_data = False\n",
            "[OPTION] signals = None\n",
            "[OPTION] target = Tensor(\"placeholder/target/linear-32:0\", shape=(?, 1), dtype=float32)\n",
            "[OPTION] verbose = True\n",
            "\r\n",
            "[TENSORFLOW] Initializing Tensorflow variables and functions.\n",
            "[TENSORFLOW] Initialization finished successfully. It took 11.66 seconds\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e5lU_Ro0NPjV",
        "outputId": "91868d88-fcbc-4e25-8e7e-c9cd1c286cfa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "optimizer.train(trainX_Kvalue, trainY_Kvalue, validationX_Kvalue, validationY_Kvalue, epochs=10)"
      ],
      "execution_count": 221,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "#21 : [5 ms] train: 0.006169, valid: 0.354098\n",
            "#25 : [4 ms] train: 0.005302, valid: 0.355810\n",
            "#30 : [3 ms] train: 0.003544, valid: 0.321857\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "\r                                                                               \r\r                                                                               \r\r                                                                               \r\r                                                                               \r\r                                                                               \r\r                                                                               \r\r                                                                               \r\r                                                                               \r\r                                                                               \r\r                                                                               \r"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6FCY9PBQNS7y",
        "outputId": "4945b9a2-ddde-403e-e0dc-9409237153ca",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# 誤差をプロットして、チューニングしやすいようにする。\n",
        "optimizer.plot_errors()"
      ],
      "execution_count": 226,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/neupy/algorithms/plots.py:80: UserWarning: There is no data to plot\n",
            "  warnings.warn(\"There is no data to plot\")\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UMuFcQN9NVm7",
        "outputId": "7d336216-798f-4e55-823a-7596563f3a67",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "def rmsle(expected, predicted):\n",
        "    log_expected = np.log1p(expected + 1)\n",
        "    log_predicted = np.log1p(predicted + 1)\n",
        "    squared_log_error = np.square(log_expected - log_predicted)\n",
        "    return np.sqrt(np.mean(squared_log_error))\n",
        "\n",
        "# 予測結果\n",
        "predicted_Kvalue_test = optimizer.predict(testX_Kvalue)\n",
        "predicted_Kvalue_validation = optimizer.predict(validationX_Kvalue)\n",
        "predicted_Kvalue_train = optimizer.predict(trainX_Kvalue)"
      ],
      "execution_count": 227,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\r                                                                               \r\r                                                                               \r\r                                                                               \r"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TPE98kL6fDnC",
        "outputId": "9da5a94e-c143-4715-d554-aea6ed0b8faa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        }
      },
      "source": [
        "# train, validation, testそれぞれについて散布図をかく。\n",
        "fig = plt.figure()\n",
        "axis = fig.add_subplot(111, xlim=(-1, 1), ylim=(-1, 1), xlabel='actual K value', ylabel='predicted K value')\n",
        "plt.scatter(testY_Kvalue, predicted_Kvalue_test, marker='o', label='test', color=\"red\")\n",
        "plt.scatter(validationY_Kvalue, predicted_Kvalue_validation, marker='o', label='validation', color=\"green\")\n",
        "plt.scatter(trainY_Kvalue, predicted_Kvalue_train, marker='o', label='train', color=\"blue\")\n",
        "plt.legend(loc='upper left')"
      ],
      "execution_count": 224,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f5ab624b550>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 224
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}